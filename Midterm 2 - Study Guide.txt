Midterm 2 Topics

Network protocols
 - client/server model
 - IP content: source IP address; destination IP address
 - TCP/UDP: source port; destination port
 	> 
 - Notion of well-known ports (you should know the well-known ports for HTTP and DNS)
 - TCP vs. UDP characteristics, TCP three-way handshake
 - Unique identification of a "connection" between two hosts (i.e., four-tuple)
 	> Host address and a port (IP Address)
 	> Server also has Host address and a port (IP Address)
 - IPv4 address characteristics, length, presentation

Sockets

- types: SOCK_DGRAM and SOCK_STREAM
 - similarities and differences between types:
   - how function operation differs or is applicable (or not) for each type:
     - socket(), bind(), connect(), listen(), accept(), send(), recv()
   - underlying transport protocol
   - kernel- vs. user-level functionality
 - setup operations on sockets, specific to 1) client or server usage 2) and type.  You should know what each of the following do, which are required for each case, etc:
   - socket(), bind(), connect(), listen(), accept()
 - read()/write() operations on blocking sockets of both types
   - depending on what data is in the buffer, if any
   - what happens if peer closes connection
 - getaddrinfo() usage

URL
 - parts breakdown: protocol, hostname, port, URI (including query string)

DNS
 - Name resolution basics
 - Types: A, CNAME
 - Name encoding and name compression in DNS messages (the concepts from the lab!)

HTTP
 - Request / response line
 - Headers / end-of-headers signal
 - Content-length header
 - How a query string is formed
 - GET vs. POST
 - Request body
 - Response body

CGI
 - How a CGI program operates inside a Web server (CGI program perspective)
 - How CGI is implemented by a Web server (Web server perspective)

Threads / Semaphores
 - what is shared between threads, what is not
 - sharing of variables across threads - global, static, stack
 - basic properties of a semaphore
 - semaphore initialization, sem_wait, sem_post
 - data sharing
 - creating, joining, detached vs. joinable
 - Using as a mutex
 - Shared data paradigms - principles and example code
   - Producer-consumer
   		>
   - Readers-writers

